const cors = require('cors');
const express = require('express');
const bodyParser = require('body-parser');

const AppError = require('./app-error');

const OK = 200;
const CREATED = 201;
const BAD_REQUEST = 400;
const NOT_FOUND = 404;
const CONFLICT = 409;
const SERVER_ERROR = 500;

function serve(port, sensors) {
  //@TODO set up express app, routing and listen
  const app=express();
  app.locals.port=port;
  app.locals.sensors=sensors;
    //console.log(sensors.client.s.url);
    //sensors.toString=function(){return sensors};
 setupRoutes(app);
 app.listen(port,function(){
 console.log(`listening on port ${port}`);
 })
// console.log(sensors);
}


module.exports = { serve:serve };

function setupRoutes(app) {
  const sensors = app.locals.sensors;
  //console.log(sensors);
  app.use(cors());
  app.use(bodyParser.json());
  //app.get(`{sensors}/sensor-types`, doList(app));
  // app.get('http://localhost:2346/sensor-types',doList(app));
  app.get(`sensor-types`,doList(app));
 console.log("in here");
 
}
//@TODO routing function, handlers, utility functions

function doGet(app) {
  return errorWrap(async function(req, res) {
    try {
      const id = req.params.id;
      const results = await app.locals.model.read({ id: id });
      if (results.length === 0) {
	throw {
	  isDomain: true,
	  errorCode: 'NOT_FOUND',
	  message: `user ${id} not found`,
	};
      }
      else {
	res.json(results);
      }
    }
    catch(err) {
      const mapped = mapError(err);
      res.status(mapped.status).json(mapped);
    }
  });
}

function doList(app) {
  return errorWrap(async function(req, res) {
    const q = req.query || {};
    console.log(q);
    try {
      const results = await app.locals.sensors.findSensorTypes(q);
      res.json(results);
    }
    catch (err) {
      const mapped = mapError(err);
      res.status(mapped.status).json(mapped);
    }
  });
}





function doCreate(app){
  return errorWrap(async function(req,res)
  { 
    try{
      console.log("inside doCreate");
    }
    catch(err)
    {
      const mapped=mapError(err);
      res.status(mapped.status).json(mapped);
    }
     })
}




function doErrors(app) {
  return async function(err, req, res, next) {
    res.status(SERVER_ERROR);
    res.json({ code: 'SERVER_ERROR', message: err.message });
    console.error(err);
  };
}

/** Set up error handling for handler by wrapping it in a 
 *  try-catch with chaining to error handler on error.
 */
function errorWrap(handler) {
  return async (req, res, next) => {
    try {
      await handler(req, res, next);
    }
    catch (err) {
      next(err);
    }
  };
}

/*************************** Mapping Errors ****************************/

const ERROR_MAP = {
  EXISTS: CONFLICT,
  NOT_FOUND: NOT_FOUND
}

/** Map domain/internal errors into suitable HTTP errors.  Return'd
 *  object will have a "status" property corresponding to HTTP status
 *  code.
 */
function mapError(err) {
  console.error(err);
  return err.isDomain
    ? { status: (ERROR_MAP[err.errorCode] || BAD_REQUEST),
	code: err.errorCode,
	message: err.message
      }
    : { status: SERVER_ERROR,
	code: 'INTERNAL',
	message: err.toString()
      };
} 

/****************************** Utilities ******************************/

/** Return original URL for req */
function requestUrl(req) {
  const port = req.app.locals.port;
  return `${req.protocol}://${req.hostname}:${port}${req.originalUrl}`;
}
  
